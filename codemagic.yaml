workflows:
  macos_release:
    name: macOS Signed & Notarized

    triggering:
      events:
        - tag
      tag_patterns:
        - pattern: "v*"
          include: true
      branch_patterns:
        - pattern: "*"
          include: false

    environment:
      vars:
        APP_NAME: AliasManager
        APP_BUNDLE_ID: com.fluttered.aliasmanager
        SIGNING_IDENTITY: "Developer ID Application: FLUTTERED SOCIEDAD LIMITADA (5NU7A4TGMF)"
        KEYCHAIN_PATH: /tmp/signing.keychain
        KEYCHAIN_PASSWORD: tempkey
        GITHUB_REPOSITORY: $GITHUB_REPOSITORY
        APPLE_ID_EMAIL: $APPLE_ID_EMAIL
        APP_SPECIFIC_PASSWORD: $APP_SPECIFIC_PASSWORD
        TEAM_ID: $TEAM_ID
        CERTIFICATE_PASSWORD: $CERTIFICATE_PASSWORD
        PATH: $PATH:$HOME/.pub-cache/bin
      flutter: stable
      xcode: latest
      secure_files:
        - developer_id_cert

    scripts:
      - name: Install FVM
        script: |
          dart pub global activate fvm
          fvm --version

      - name: Flutter deps
        script: fvm flutter pub get

      - name: Enable macOS
        script: fvm flutter config --enable-macos-desktop

      - name: Build release
        script: fvm flutter build macos --release

      - name: Create keychain & import certificate
        script: |
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security import "$CM_BUILD_DIR/developer_id_cert" \
            -k "$KEYCHAIN_PATH" \
            -P "$CERTIFICATE_PASSWORD" \
            -T /usr/bin/codesign
          security list-keychain -d user -s "$KEYCHAIN_PATH"
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

      - name: Codesign .app
        script: |
          codesign --deep --force --options runtime \
            --sign "$SIGNING_IDENTITY" \
            "build/macos/Build/Products/Release/$APP_NAME.app"

      - name: Zip for notarization
        script: |
          ditto -c -k --keepParent \
            "build/macos/Build/Products/Release/$APP_NAME.app" \
            "$APP_NAME.zip"

      - name: Notarize
        script: |
          xcrun notarytool submit "$APP_NAME.zip" \
            --apple-id "$APPLE_ID_EMAIL" \
            --password "$APP_SPECIFIC_PASSWORD" \
            --team-id "$TEAM_ID" \
            --wait

      - name: Staple
        script: xcrun stapler staple "build/macos/Build/Products/Release/$APP_NAME.app"

      - name: Verify
        script: spctl --assess --type execute -v "build/macos/Build/Products/Release/$APP_NAME.app" || true

      - name: Upload notarized zip to GitHub Release
        script: fvm dart run scripts/upload_release_asset.dart

    artifacts:
      - $APP_NAME.zip
      - build/macos/Build/Products/Release/$APP_NAME.app
