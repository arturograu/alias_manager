workflows:
  macos_release:
    name: macOS Signed & Notarized

    triggering:
      events:
        - tag
      tag_patterns:
        - pattern: "v*"
          include: true
      branch_patterns:
        - pattern: "*"
          include: false

    environment:
      vars:
        APP_NAME: AliasManager
        APP_BUNDLE_ID: com.fluttered.aliasmanager
        SIGNING_IDENTITY: "Developer ID Application: FLUTTERED SOCIEDAD LIMITADA (5NU7A4TGMF)"
        KEYCHAIN_PATH: /tmp/signing.keychain
        KEYCHAIN_PASSWORD: tempkey
        GITHUB_REPOSITORY: arturograu/alias_manager
      flutter: stable
      xcode: latest
      groups:
        - app-store-credentials
        - github
      secure_files:
        - developer_id_cert

    scripts:
      - name: Install FVM
        script: |
          dart pub global activate fvm
          export PATH="$PATH":"$HOME/.pub-cache/bin"
          fvm --version

      - name: Flutter deps
        script: |
          export PATH="$PATH":"$HOME/.pub-cache/bin"
          fvm flutter pub get

      - name: Enable macOS
        script: |
          export PATH="$PATH":"$HOME/.pub-cache/bin"
          fvm flutter config --enable-macos-desktop

      - name: Build release
        script: |
          export PATH="$PATH":"$HOME/.pub-cache/bin"
          fvm flutter build macos --release

      - name: Create keychain & import certificate
        script: |
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          # Codemagic deja el secure file en $CM_BUILD_DIR con el mismo nombre
          security import "$CM_BUILD_DIR/developer_id_cert" \
            -k "$KEYCHAIN_PATH" \
            -P "$CERTIFICATE_PASSWORD" \
            -T /usr/bin/codesign
          security list-keychain -d user -s "$KEYCHAIN_PATH"

      - name: Codesign .app
        script: |
          codesign --deep --force --options runtime \
            --sign "$SIGNING_IDENTITY" \
            "build/macos/Build/Products/Release/$APP_NAME.app"

      - name: Zip for notarization
        script: |
          ditto -c -k --keepParent \
            "build/macos/Build/Products/Release/$APP_NAME.app" \
            "$APP_NAME.zip"

      - name: Notarize
        script: |
          xcrun notarytool submit "$APP_NAME.zip" \
            --apple-id "$APPLE_ID_EMAIL" \
            --password "$APP_SPECIFIC_PASSWORD" \
            --team-id "$TEAM_ID" \
            --wait

      - name: Staple
        script: |
          xcrun stapler staple "build/macos/Build/Products/Release/$APP_NAME.app"

      - name: Verify
        script: |
          spctl --assess --type execute -v "build/macos/Build/Products/Release/$APP_NAME.app" || true

      - name: Upload notarized zip to GitHub Release
        script: |
          # We need jq to parse the JSON
          if ! command -v jq >/dev/null 2>&1; then
            brew install jq
          fi

          TAG_NAME="${CM_TAG:-$(git describe --tags --abbrev=0)}"
          echo "Tag: $TAG_NAME"
          API="https://api.github.com/repos/$GITHUB_REPOSITORY"

          TOKEN="${GITHUB_PAT:-$PERSONAL_ACCESS_TOKEN}"

          RELEASE_ID=$(curl -s -H "Authorization: token $TOKEN" "$API/releases/tags/$TAG_NAME" | jq -r .id)

          if [ "$RELEASE_ID" = "null" ] || [ -z "$RELEASE_ID" ]; then
            echo "Release not found for $TAG_NAME. Creating..."
            RESPONSE=$(curl -s -H "Authorization: token $TOKEN" \
              -d "{\"tag_name\":\"$TAG_NAME\",\"name\":\"$TAG_NAME\",\"draft\":false,\"prerelease\":false}" \
              "$API/releases")
            RELEASE_ID=$(echo "$RESPONSE" | jq -r .id)
          fi

          echo "Uploading $APP_NAME.zip to release $TAG_NAME (id: $RELEASE_ID)"
          curl -s -H "Authorization: token $TOKEN" \
               -H "Content-Type: application/zip" \
               --data-binary @"$APP_NAME.zip" \
               "https://uploads.github.com/repos/$GITHUB_REPOSITORY/releases/$RELEASE_ID/assets?name=$APP_NAME.zip"

    artifacts:
      - $APP_NAME.zip
      - build/macos/Build/Products/Release/$APP_NAME.app
